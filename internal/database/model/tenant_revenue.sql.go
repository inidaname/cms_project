// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenant_revenue.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getTenantRevenue = `-- name: GetTenantRevenue :one
SELECT t.id AS tenant_id,
       t.name AS tenant_name,
       COALESCE(SUM(p.amount_cents), 0) AS total_revenue_cents
FROM tenants t
LEFT JOIN invoices i ON t.id = i.tenant_id
LEFT JOIN payments p ON i.id = p.invoice_id AND p.status = 'success'
WHERE t.id = $1
GROUP BY t.id, t.name
`

type GetTenantRevenueRow struct {
	TenantID          uuid.UUID   `json:"tenant_id"`
	TenantName        string      `json:"tenant_name"`
	TotalRevenueCents interface{} `json:"total_revenue_cents"`
}

func (q *Queries) GetTenantRevenue(ctx context.Context, id uuid.UUID) (GetTenantRevenueRow, error) {
	row := q.db.QueryRowContext(ctx, getTenantRevenue, id)
	var i GetTenantRevenueRow
	err := row.Scan(&i.TenantID, &i.TenantName, &i.TotalRevenueCents)
	return i, err
}
