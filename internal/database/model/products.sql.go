// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countTenantProducts = `-- name: CountTenantProducts :one
SELECT COUNT(*) FROM products WHERE tenant_id = $1
`

func (q *Queries) CountTenantProducts(ctx context.Context, tenantID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTenantProducts, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (tenant_id, name, description, price_cents, currency)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, tenant_id, name, description, price_cents, currency, created_at
`

type CreateProductParams struct {
	TenantID    uuid.UUID      `json:"tenant_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	PriceCents  int32          `json:"price_cents"`
	Currency    string         `json:"currency"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.TenantID,
		arg.Name,
		arg.Description,
		arg.PriceCents,
		arg.Currency,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.PriceCents,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, tenant_id, name, description, price_cents, currency, created_at FROM products WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.PriceCents,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listProductsByTenant = `-- name: ListProductsByTenant :many
SELECT id, tenant_id, name, description, price_cents, currency, created_at FROM products WHERE tenant_id = $1 ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProductsByTenantParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) ListProductsByTenant(ctx context.Context, arg ListProductsByTenantParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Description,
			&i.PriceCents,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, description = $3, price_cents = $4, currency = $5
WHERE id = $1
RETURNING id, tenant_id, name, description, price_cents, currency, created_at
`

type UpdateProductParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	PriceCents  int32          `json:"price_cents"`
	Currency    string         `json:"currency"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.PriceCents,
		arg.Currency,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.PriceCents,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
