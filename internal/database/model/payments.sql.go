// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countTenantPayments = `-- name: CountTenantPayments :one
SELECT COUNT(*) 
FROM payments p
JOIN invoices i ON p.invoice_id = i.id
WHERE p.tenant_id = $1
`

func (q *Queries) CountTenantPayments(ctx context.Context, tenantID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTenantPayments, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (tenant_id, invoice_id, amount_cents, currency, provider, status, transaction_ref)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, tenant_id, invoice_id, amount_cents, currency, provider, status, transaction_ref, created_at
`

type CreatePaymentParams struct {
	TenantID       uuid.UUID      `json:"tenant_id"`
	InvoiceID      uuid.UUID      `json:"invoice_id"`
	AmountCents    int32          `json:"amount_cents"`
	Currency       string         `json:"currency"`
	Provider       string         `json:"provider"`
	Status         string         `json:"status"`
	TransactionRef sql.NullString `json:"transaction_ref"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.TenantID,
		arg.InvoiceID,
		arg.AmountCents,
		arg.Currency,
		arg.Provider,
		arg.Status,
		arg.TransactionRef,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.InvoiceID,
		&i.AmountCents,
		&i.Currency,
		&i.Provider,
		&i.Status,
		&i.TransactionRef,
		&i.CreatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, tenant_id, invoice_id, amount_cents, currency, provider, status, transaction_ref, created_at FROM payments WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.InvoiceID,
		&i.AmountCents,
		&i.Currency,
		&i.Provider,
		&i.Status,
		&i.TransactionRef,
		&i.CreatedAt,
	)
	return i, err
}

const listPaymentsByInvoice = `-- name: ListPaymentsByInvoice :many
SELECT id, tenant_id, invoice_id, amount_cents, currency, provider, status, transaction_ref, created_at FROM payments WHERE invoice_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListPaymentsByInvoice(ctx context.Context, invoiceID uuid.UUID) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentsByInvoice, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.InvoiceID,
			&i.AmountCents,
			&i.Currency,
			&i.Provider,
			&i.Status,
			&i.TransactionRef,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments
SET status = $2
WHERE id = $1
RETURNING id, tenant_id, invoice_id, amount_cents, currency, provider, status, transaction_ref, created_at
`

type UpdatePaymentStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentStatus, arg.ID, arg.Status)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.InvoiceID,
		&i.AmountCents,
		&i.Currency,
		&i.Provider,
		&i.Status,
		&i.TransactionRef,
		&i.CreatedAt,
	)
	return i, err
}
