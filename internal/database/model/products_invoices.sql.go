// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products_invoices.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const listTenantProductsWithInvoices = `-- name: ListTenantProductsWithInvoices :many
SELECT p.id AS product_id,
       p.name AS product_name,
       p.price_cents,
       p.currency,
       i.id AS invoice_id,
       i.amount_cents AS invoice_amount,
       i.status AS invoice_status
FROM products p
LEFT JOIN invoices i ON p.tenant_id = i.tenant_id
WHERE p.tenant_id = $1
ORDER BY p.created_at DESC, i.issued_at DESC
LIMIT $2 OFFSET $3
`

type ListTenantProductsWithInvoicesParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

type ListTenantProductsWithInvoicesRow struct {
	ProductID     uuid.UUID      `json:"product_id"`
	ProductName   string         `json:"product_name"`
	PriceCents    int32          `json:"price_cents"`
	Currency      string         `json:"currency"`
	InvoiceID     uuid.NullUUID  `json:"invoice_id"`
	InvoiceAmount sql.NullInt32  `json:"invoice_amount"`
	InvoiceStatus sql.NullString `json:"invoice_status"`
}

func (q *Queries) ListTenantProductsWithInvoices(ctx context.Context, arg ListTenantProductsWithInvoicesParams) ([]ListTenantProductsWithInvoicesRow, error) {
	rows, err := q.db.QueryContext(ctx, listTenantProductsWithInvoices, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTenantProductsWithInvoicesRow{}
	for rows.Next() {
		var i ListTenantProductsWithInvoicesRow
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.PriceCents,
			&i.Currency,
			&i.InvoiceID,
			&i.InvoiceAmount,
			&i.InvoiceStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
