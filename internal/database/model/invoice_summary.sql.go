// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invoice_summary.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getInvoiceSummary = `-- name: GetInvoiceSummary :one
SELECT i.id AS invoice_id,
       i.customer_email,
       i.amount_cents,
       i.currency,
       i.status AS invoice_status,
       COUNT(p.id) AS payments_count,
       COALESCE(SUM(p.amount_cents), 0) AS total_paid_cents
FROM invoices i
LEFT JOIN payments p ON i.id = p.invoice_id AND p.status = 'success'
WHERE i.id = $1
GROUP BY i.id, i.customer_email, i.amount_cents, i.currency, i.status
`

type GetInvoiceSummaryRow struct {
	InvoiceID      uuid.UUID   `json:"invoice_id"`
	CustomerEmail  string      `json:"customer_email"`
	AmountCents    int32       `json:"amount_cents"`
	Currency       string      `json:"currency"`
	InvoiceStatus  string      `json:"invoice_status"`
	PaymentsCount  int64       `json:"payments_count"`
	TotalPaidCents interface{} `json:"total_paid_cents"`
}

func (q *Queries) GetInvoiceSummary(ctx context.Context, id uuid.UUID) (GetInvoiceSummaryRow, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceSummary, id)
	var i GetInvoiceSummaryRow
	err := row.Scan(
		&i.InvoiceID,
		&i.CustomerEmail,
		&i.AmountCents,
		&i.Currency,
		&i.InvoiceStatus,
		&i.PaymentsCount,
		&i.TotalPaidCents,
	)
	return i, err
}
