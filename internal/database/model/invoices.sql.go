// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invoices.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countTenantInvoices = `-- name: CountTenantInvoices :one
SELECT COUNT(*) FROM invoices WHERE tenant_id = $1
`

func (q *Queries) CountTenantInvoices(ctx context.Context, tenantID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTenantInvoices, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (tenant_id, user_id, customer_email, amount_cents, currency, due_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, tenant_id, user_id, customer_email, amount_cents, currency, status, issued_at, due_at
`

type CreateInvoiceParams struct {
	TenantID      uuid.UUID     `json:"tenant_id"`
	UserID        uuid.NullUUID `json:"user_id"`
	CustomerEmail string        `json:"customer_email"`
	AmountCents   int32         `json:"amount_cents"`
	Currency      string        `json:"currency"`
	DueAt         sql.NullTime  `json:"due_at"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.TenantID,
		arg.UserID,
		arg.CustomerEmail,
		arg.AmountCents,
		arg.Currency,
		arg.DueAt,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UserID,
		&i.CustomerEmail,
		&i.AmountCents,
		&i.Currency,
		&i.Status,
		&i.IssuedAt,
		&i.DueAt,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT id, tenant_id, user_id, customer_email, amount_cents, currency, status, issued_at, due_at FROM invoices WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, id uuid.UUID) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByID, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UserID,
		&i.CustomerEmail,
		&i.AmountCents,
		&i.Currency,
		&i.Status,
		&i.IssuedAt,
		&i.DueAt,
	)
	return i, err
}

const listInvoicesByTenant = `-- name: ListInvoicesByTenant :many
SELECT id, tenant_id, user_id, customer_email, amount_cents, currency, status, issued_at, due_at FROM invoices WHERE tenant_id = $1 ORDER BY issued_at DESC
LIMIT $2 OFFSET $3
`

type ListInvoicesByTenantParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) ListInvoicesByTenant(ctx context.Context, arg ListInvoicesByTenantParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoicesByTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.UserID,
			&i.CustomerEmail,
			&i.AmountCents,
			&i.Currency,
			&i.Status,
			&i.IssuedAt,
			&i.DueAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoiceStatus = `-- name: UpdateInvoiceStatus :one
UPDATE invoices
SET status = $2
WHERE id = $1
RETURNING id, tenant_id, user_id, customer_email, amount_cents, currency, status, issued_at, due_at
`

type UpdateInvoiceStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateInvoiceStatus(ctx context.Context, arg UpdateInvoiceStatusParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceStatus, arg.ID, arg.Status)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.UserID,
		&i.CustomerEmail,
		&i.AmountCents,
		&i.Currency,
		&i.Status,
		&i.IssuedAt,
		&i.DueAt,
	)
	return i, err
}
