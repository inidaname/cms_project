// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenants.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name, domain)
VALUES ($1, $2)
RETURNING id, name, domain, created_at
`

type CreateTenantParams struct {
	Name   string         `json:"name"`
	Domain sql.NullString `json:"domain"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant, arg.Name, arg.Domain)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, id)
	return err
}

const getTenantByDomain = `-- name: GetTenantByDomain :one
SELECT id, name, domain, created_at FROM tenants WHERE domain = $1 LIMIT 1
`

func (q *Queries) GetTenantByDomain(ctx context.Context, domain sql.NullString) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByDomain, domain)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.CreatedAt,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, domain, created_at FROM tenants WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTenantByID(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.CreatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, name, domain, created_at FROM tenants ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListTenantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTenants(ctx context.Context, arg ListTenantsParams) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, listTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Domain,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
